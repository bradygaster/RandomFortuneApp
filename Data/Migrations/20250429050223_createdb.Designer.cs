// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(PetBnBDbContext))]
    [Migration("20250429050223_createdb")]
    partial class createdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("Data.Entities.PetType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PetTypes");
                });

            modelBuilder.Entity("Data.Entities.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Data.Entities.Sitter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AvailabilityUpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HeroPhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("numeric");

                    b.Property<int>("RepeatClientCount")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("integer");

                    b.Property<decimal>("StarRating")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Sitters");
                });

            modelBuilder.Entity("Data.Entities.SitterBadge", b =>
                {
                    b.Property<int>("SitterId")
                        .HasColumnType("integer");

                    b.Property<int>("BadgeId")
                        .HasColumnType("integer");

                    b.HasKey("SitterId", "BadgeId");

                    b.HasIndex("BadgeId");

                    b.ToTable("SitterBadges");
                });

            modelBuilder.Entity("Data.Entities.SitterPetType", b =>
                {
                    b.Property<int>("SitterId")
                        .HasColumnType("integer");

                    b.Property<int>("PetTypeId")
                        .HasColumnType("integer");

                    b.HasKey("SitterId", "PetTypeId");

                    b.HasIndex("PetTypeId");

                    b.ToTable("SitterPetTypes");
                });

            modelBuilder.Entity("Data.Entities.SitterServiceType", b =>
                {
                    b.Property<int>("SitterId")
                        .HasColumnType("integer");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("integer");

                    b.HasKey("SitterId", "ServiceTypeId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("SitterServiceTypes");
                });

            modelBuilder.Entity("Data.Entities.SitterBadge", b =>
                {
                    b.HasOne("Data.Entities.Badge", "Badge")
                        .WithMany("SitterBadges")
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Sitter", "Sitter")
                        .WithMany("SitterBadges")
                        .HasForeignKey("SitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Badge");

                    b.Navigation("Sitter");
                });

            modelBuilder.Entity("Data.Entities.SitterPetType", b =>
                {
                    b.HasOne("Data.Entities.PetType", "PetType")
                        .WithMany("SitterPetTypes")
                        .HasForeignKey("PetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Sitter", "Sitter")
                        .WithMany("SitterPetTypes")
                        .HasForeignKey("SitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PetType");

                    b.Navigation("Sitter");
                });

            modelBuilder.Entity("Data.Entities.SitterServiceType", b =>
                {
                    b.HasOne("Data.Entities.ServiceType", "ServiceType")
                        .WithMany("SitterServiceTypes")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.Sitter", "Sitter")
                        .WithMany("SitterServiceTypes")
                        .HasForeignKey("SitterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");

                    b.Navigation("Sitter");
                });

            modelBuilder.Entity("Data.Entities.Badge", b =>
                {
                    b.Navigation("SitterBadges");
                });

            modelBuilder.Entity("Data.Entities.PetType", b =>
                {
                    b.Navigation("SitterPetTypes");
                });

            modelBuilder.Entity("Data.Entities.ServiceType", b =>
                {
                    b.Navigation("SitterServiceTypes");
                });

            modelBuilder.Entity("Data.Entities.Sitter", b =>
                {
                    b.Navigation("SitterBadges");

                    b.Navigation("SitterPetTypes");

                    b.Navigation("SitterServiceTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
